{"ast":null,"code":"// Function to import data from the API\nexport function getDataFromUrl() {\n  const httpreq = new XMLHttpRequest();\n  const externUrl = \"https://ed87c2a9-bcc4-4e0c-8fd2-fefb9875b65b.mock.pstmn.io/getStockConsolidation\";\n  httpreq.open(\"GET\", externUrl, false);\n  httpreq.send(null);\n  return httpreq.responseText;\n} // Converts names into Upper Case and sorts them increasingly\n\nexport function sortedUpperProducts() {\n  const data = JSON.parse(getDataFromUrl());\n  const finalArray = [];\n  data.data.products.forEach(product => {\n    const upperCaseName = product.productName.toUpperCase();\n    const splitUpperCaseName = upperCaseName.split(\" \");\n    product.productName = \"\";\n\n    for (let i = 2; i < splitUpperCaseName.length; i++) {\n      if (i > 2) {\n        product.productName += \" \" + splitUpperCaseName[i];\n      } else {\n        product.productName += splitUpperCaseName[i];\n      }\n    }\n\n    finalArray.push(product);\n  });\n\n  for (let i = 0; i < finalArray.length; i++) {\n    for (let j = 0; j < finalArray.length; j++) {\n      if (finalArray[i].productName < finalArray[j].productName) {\n        const temporaryName = finalArray[j].productName;\n        finalArray[j].productName = finalArray[i].productName;\n        finalArray[i].productName = temporaryName;\n      }\n    }\n  }\n\n  return finalArray;\n} // Reverses a string\n\nexport function reverseString(strg) {\n  let newString = \"\";\n\n  for (let i = strg.length - 1; i >= 0; i--) {\n    newString += strg[i];\n  }\n\n  return newString;\n} // Puts a number into brazilian money pattern\n\nexport function styleMoney(money) {\n  const moneyString = money.toString();\n  let countNumbers = 0;\n  let moneyFinal = \"\";\n  let checkComma = 0;\n\n  for (let i = moneyString.length - 1; i >= 0; i--) {\n    countNumbers++;\n\n    if (moneyString[i] === \".\") {\n      moneyFinal += \",\";\n      checkComma = 1;\n      countNumbers = 0;\n    } else {\n      moneyFinal += moneyString[i];\n    }\n\n    if (countNumbers === 3) {\n      moneyFinal += \".\";\n      countNumbers = 0;\n    }\n  }\n\n  if (checkComma === 1) return reverseString(moneyFinal);\n  return \"\".concat(reverseString(moneyFinal), \",00\");\n}","map":{"version":3,"sources":["C:\\Users\\Alves\\Documents\\GitHub\\kinvo-front-end-test\\kinvo-teste\\src\\components\\FunctionsLibrary.jsx"],"names":["getDataFromUrl","httpreq","XMLHttpRequest","externUrl","open","send","responseText","sortedUpperProducts","data","JSON","parse","finalArray","products","forEach","product","upperCaseName","productName","toUpperCase","splitUpperCaseName","split","i","length","push","j","temporaryName","reverseString","strg","newString","styleMoney","money","moneyString","toString","countNumbers","moneyFinal","checkComma"],"mappings":"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","sourcesContent":["// Function to import data from the API\r\nexport function getDataFromUrl() {\r\n  const httpreq = new XMLHttpRequest();\r\n  const externUrl =\r\n    \"https://ed87c2a9-bcc4-4e0c-8fd2-fefb9875b65b.mock.pstmn.io/getStockConsolidation\";\r\n  httpreq.open(\"GET\", externUrl, false);\r\n  httpreq.send(null);\r\n  return httpreq.responseText;\r\n}\r\n\r\n// Converts names into Upper Case and sorts them increasingly\r\nexport function sortedUpperProducts() {\r\n  const data = JSON.parse(getDataFromUrl());\r\n  const finalArray = [];\r\n\r\n  data.data.products.forEach(product => {\r\n    const upperCaseName = product.productName.toUpperCase();\r\n    const splitUpperCaseName = upperCaseName.split(\" \");\r\n    product.productName = \"\";\r\n\r\n    for (let i = 2; i < splitUpperCaseName.length; i++) {\r\n      if (i > 2) {\r\n        product.productName += \" \" + splitUpperCaseName[i];\r\n      } else {\r\n        product.productName += splitUpperCaseName[i];\r\n      }\r\n    }\r\n\r\n    finalArray.push(product);\r\n  });\r\n\r\n  for (let i = 0; i < finalArray.length; i++) {\r\n    for (let j = 0; j < finalArray.length; j++) {\r\n      if (finalArray[i].productName < finalArray[j].productName) {\r\n        const temporaryName = finalArray[j].productName;\r\n        finalArray[j].productName = finalArray[i].productName;\r\n        finalArray[i].productName = temporaryName;\r\n      }\r\n    }\r\n  }\r\n\r\n  return finalArray;\r\n}\r\n\r\n// Reverses a string\r\nexport function reverseString(strg) {\r\n  let newString = \"\";\r\n\r\n  for (let i = strg.length - 1; i >= 0; i--) {\r\n    newString += strg[i];\r\n  }\r\n\r\n  return newString;\r\n}\r\n\r\n// Puts a number into brazilian money pattern\r\nexport function styleMoney(money) {\r\n  const moneyString = money.toString();\r\n  let countNumbers = 0;\r\n  let moneyFinal = \"\";\r\n  let checkComma = 0;\r\n\r\n  for (let i = moneyString.length - 1; i >= 0; i--) {\r\n    countNumbers++;\r\n\r\n    if (moneyString[i] === \".\") {\r\n      moneyFinal += \",\";\r\n      checkComma = 1;\r\n      countNumbers = 0;\r\n    } else {\r\n      moneyFinal += moneyString[i];\r\n    }\r\n\r\n    if (countNumbers === 3) {\r\n      moneyFinal += \".\";\r\n      countNumbers = 0;\r\n    }\r\n  }\r\n\r\n  if (checkComma === 1) return reverseString(moneyFinal);\r\n  return `${reverseString(moneyFinal)},00`;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}